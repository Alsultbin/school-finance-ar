const express = require('express');
const router = express.Router();
const fs = require('fs');
const path = require('path');
const XLSX = require('xlsx');
const { jsPDF } = require('jspdf');
require('jspdf-autotable');

// Generate PDF report
router.post('/pdf', async (req, res) => {
  try {
    const { students, type } = req.body;
    const doc = new jsPDF();

    // Add title
    doc.setFontSize(20);
    doc.text('Student Report', 105, 20, { align: 'center' });

    // Add date
    doc.setFontSize(12);
    const date = new Date().toLocaleDateString();
    doc.text(`Generated on: ${date}`, 105, 30, { align: 'center' });

    // Add table
    doc.autoTable({
      head: [['ID', 'Name', 'Grade', 'Section', 'Admission Number', 'Gender', 'Parent', 'Contact', 'Email', 'Address', 'Fees Status']],
      body: students.map(student => [
        student._id,
        student.name,
        student.grade,
        student.section,
        student.admissionNumber,
        student.gender,
        student.parent,
        student.contact,
        student.email,
        student.address,
        student.fees
      ]),
      startY: 40
    });

    // Add footer
    doc.setFontSize(10);
    doc.text('Generated by School Finance Management System', 105, doc.internal.pageSize.height - 10, { align: 'center' });

    // Save and send the PDF
    const pdfBuffer = doc.output('arraybuffer');
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', 'attachment; filename=student_report.pdf');
    res.send(pdfBuffer);
  } catch (error) {
    console.error('Error generating PDF:', error);
    res.status(500).json({ message: 'Failed to generate PDF report' });
  }
});

// Generate Excel report
router.post('/excel', async (req, res) => {
  try {
    const { students, type } = req.body;
    
    // Create workbook and worksheet
    const workbook = XLSX.utils.book_new();
    const worksheet = XLSX.utils.json_to_sheet(students);
    XLSX.utils.book_append_sheet(workbook, worksheet, 'Students');

    // Add title row
    const titleRow = {
      A1: { t: 's', v: 'Student Report' },
      B1: { t: 's', v: 'Generated on: ' + new Date().toLocaleDateString() }
    };
    const titleRange = { s: { r: 0, c: 0 }, e: { r: 0, c: 1 } };
    XLSX.utils.sheet_add_aoa(worksheet, [Object.values(titleRow)], { origin: titleRange });

    // Add headers
    const headers = ['ID', 'Name', 'Grade', 'Section', 'Admission Number', 'Gender', 'Parent', 'Contact', 'Email', 'Address', 'Fees Status'];
    XLSX.utils.sheet_add_aoa(worksheet, [headers], { origin: 'A2' });

    // Save and send the Excel file
    const excelBuffer = XLSX.write(workbook, { type: 'array', bookType: 'xlsx' });
    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    res.setHeader('Content-Disposition', 'attachment; filename=student_report.xlsx');
    res.send(excelBuffer);
  } catch (error) {
    console.error('Error generating Excel:', error);
    res.status(500).json({ message: 'Failed to generate Excel report' });
  }
});

// Generate outstanding fees report
router.post('/outstanding', async (req, res) => {
  try {
    const { students, type } = req.body;
    
    // Filter students with outstanding fees
    const outstandingStudents = students.filter(student => student.fees !== 'Paid');
    
    if (type === 'pdf') {
      const doc = new jsPDF();
      
      // Add title
      doc.setFontSize(20);
      doc.text('Outstanding Fees Report', 105, 20, { align: 'center' });
      
      // Add date
      doc.setFontSize(12);
      const date = new Date().toLocaleDateString();
      doc.text(`Generated on: ${date}`, 105, 30, { align: 'center' });

      // Add table
      doc.autoTable({
        head: [['ID', 'Name', 'Grade', 'Section', 'Admission Number', 'Contact', 'Fees Status']],
        body: outstandingStudents.map(student => [
          student._id,
          student.name,
          student.grade,
          student.section,
          student.admissionNumber,
          student.contact,
          student.fees
        ]),
        startY: 40
      });

      // Add summary
      const totalStudents = outstandingStudents.length;
      doc.setFontSize(12);
      doc.text(`Total Students with Outstanding Fees: ${totalStudents}`, 10, doc.internal.pageSize.height - 20);

      // Save and send the PDF
      const pdfBuffer = doc.output('arraybuffer');
      res.setHeader('Content-Type', 'application/pdf');
      res.setHeader('Content-Disposition', 'attachment; filename=outstanding_fees_report.pdf');
      res.send(pdfBuffer);
    } else {
      // Generate Excel
      const workbook = XLSX.utils.book_new();
      const worksheet = XLSX.utils.json_to_sheet(outstandingStudents);
      XLSX.utils.book_append_sheet(workbook, worksheet, 'Outstanding Fees');

      // Add headers
      const headers = ['ID', 'Name', 'Grade', 'Section', 'Admission Number', 'Contact', 'Fees Status'];
      XLSX.utils.sheet_add_aoa(worksheet, [headers], { origin: 'A2' });

      // Save and send the Excel file
      const excelBuffer = XLSX.write(workbook, { type: 'array', bookType: 'xlsx' });
      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
      res.setHeader('Content-Disposition', 'attachment; filename=outstanding_fees_report.xlsx');
      res.send(excelBuffer);
    }
  } catch (error) {
    console.error('Error generating outstanding fees report:', error);
    res.status(500).json({ message: 'Failed to generate outstanding fees report' });
  }
});

module.exports = router;
